version: '3.8'

services:
  # PostgreSQL database for SPIRE server
  postgres:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_DB: spire
      POSTGRES_USER: spire
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spire-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spire"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mock ECS metadata service for demonstration
  ecs-metadata-mock:
    build:
      context: ../fargate-spire-mock/mock-metadata
    ports:
      - "8090:8080"
    networks:
      - spire-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # SPIRE Server with custom AWS Fargate plugins
  spire-server:
    build:
      context: ./spire-server
    ports:
      - "8081:8081"
    networks:
      - spire-network
    volumes:
      - spire_server_data:/opt/spire/data/server
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPIRE_SERVER_CONFIG=/opt/spire/conf/server/server.conf
    healthcheck:
      test: ["CMD", "/opt/spire/bin/spire-server", "healthcheck", "-socketPath", "/tmp/spire-server/private/api.sock"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Web Application with Envoy Sidecar
  demo-app:
    build:
      context: ./app-with-envoy
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date)}
    ports:
      - "8080:8080"  # Envoy mTLS port
      - "9901:9901"  # Envoy admin interface
    networks:
      - spire-network
    volumes:
      - spire_agent_socket:/tmp/spire-agent/public
    depends_on:
      spire-server:
        condition: service_healthy
      ecs-metadata-mock:
        condition: service_healthy
    environment:
      - ECS_CONTAINER_METADATA_URI_V4=http://ecs-metadata-mock/v4
      - AWS_REGION=us-east-1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  # API Service with Envoy Sidecar
  api-service-with-agent:
    build:
      context: ./api-service-with-envoy
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date)}
    ports:
      - "8083:8080"  # Envoy mTLS port
      - "9902:9901"  # Envoy admin interface
    networks:
      - spire-network
    volumes:
      - spire_agent_socket_api:/tmp/spire-agent/public
    depends_on:
      spire-server:
        condition: service_healthy
      ecs-metadata-mock:
        condition: service_healthy
    environment:
      - ECS_CONTAINER_METADATA_URI_V4=http://ecs-metadata-mock/v4
      - AWS_REGION=us-east-1
    healthcheck:
      test: ["CMD", "/usr/local/bin/mtls-health-check.sh"]
      interval: 15s
      timeout: 15s
      retries: 3
      start_period: 45s

  # CLI Client with Envoy Sidecar
  cli-client-with-agent:
    build:
      context: ./cli-client-with-envoy
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date)}
    ports:
      - "9903:9901"  # Envoy admin interface
    networks:
      - spire-network
    volumes:
      - spire_agent_socket_cli:/tmp/spire-agent/public
    depends_on:
      spire-server:
        condition: service_healthy
      ecs-metadata-mock:
        condition: service_healthy
      api-service-with-agent:
        condition: service_healthy
    environment:
      - ECS_CONTAINER_METADATA_URI_V4=http://ecs-metadata-mock/v4
      - AWS_REGION=us-east-1
    # CLI runs on-demand, so no healthcheck needed
    stdin_open: true
    tty: true

networks:
  spire-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  spire_server_data:
  spire_agent_socket:
  spire_agent_socket_api:
  spire_agent_socket_cli:
